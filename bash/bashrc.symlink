# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put lines starting with space in the history and remove duplicates
# See bash(1) for more options
HISTCONTROL=ignorespace:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=9000
HISTFILESIZE=9000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

#export PATH=$PATH:${HOME}/bin:${HOME}/.dotfiles/bin

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# export TERM=xterm-256color
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    rxvt-unicode-256color) color_prompt=yes;;
    xterm)
        color_prompt=yes
        ;;
    xterm-color)
        color_prompt=yes
        ;;
    xterm-256color)
        color_prompt=yes
        ;;
    screen-256color)
        color_prompt=yes
        ;;
    linux)
        color_prompt=yes
        setterm --blank 0 --powerdown 0 --powersave off
        ;;
    *)
        color_prompt=""
        ;;
esac

######## Git Colour Prompt ######## 
function parse_git_branch  {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1]/"
}

if [ "$color_prompt" = yes ]; then
    # Colour my prompt including git info
    PS1='\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]:\[\033[00;33m\]$(parse_git_branch)\[\033[00m\]\$ '
else
    PS1='\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Base completions
if [ ! -v "${BASH_COMPLETION_COMPAT_DIR}" ]; then
    if [ -f "/usr/local/etc/profile.d/bash_completion.sh" ]; then
        . /usr/local/etc/profile.d/bash_completion.sh  # homebrew
    elif [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Vagrant
# export VAGRANT_VMWARE_FUSION_APP="/Applications/VMware Fusion 6.app"


######## Editing Preferences ######## 
#set -o vi
set -o emacs

export EDITOR="$(type -p vim)"


######## Python Virtual Env Wrapper ######## 
if [ -e /usr/bin/virtualenvwrapper_lazy.sh ]; then
    source /usr/bin/virtualenvwrapper_lazy.sh

elif [ -e /usr/bin/virtualenvwrapper.sh ]; then
    source /usr/bin/virtualenvwrapper.sh
fi

######## Git Auto Complete ######## 
#source ~/.git-completion.bash

######## Sytemd ######## 
# I want to control my own output
#export SYSTEMD_PAGER=""

######### SSH Agent #########
if [ "$(uname)" = "Linux" ]; then
    type keychain > /dev/null 2>&1 && eval $(keychain --eval --quick --quiet id_rsa)
fi

########### Do Mac stuff ###########
#if [ "$(uname)" = "Darwin" ]; then
#    # Virtualenv
#    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
#    if [ -e /usr/local/bin/virtualenvwrapper.sh ]; then
#        source /usr/local/bin/virtualenvwrapper.sh
#    fi
#fi

###############################################################################
# Command completion
# AWS
type aws_completer > /dev/null 2>&1 && complete -C "$(type -p aws_completer)" aws
# Hashicorp
type terraform > /dev/null 2>&1 && complete -C "$(type -p terraform)" terraform
