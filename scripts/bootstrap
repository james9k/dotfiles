#!/usr/bin/env bash
# vim: set ts=4 sw=4 sts=4 et:
# bootstrap installs things.
set -u

cd "$(dirname "$0")/.." || exit 1
DOTFILES_ROOT=$(pwd)

echo "DOTFILES_ROOT ${DOTFILES_ROOT}"

# Source reusable bash functions
source "${DOTFILES_ROOT}/bash/functions.bash"

echo ''

function link_file() {
    local src="${1}" dst="${2}"

    local overwrite='' backup='' skip=''
    local action=''

    if [ -f "${dst}" ] || [ -d "${dst}" ] || [ -L "${dst}" ]; then
        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
            local currentSrc
            currentSrc="$(readlink "${dst}")"

            if [ "$currentSrc" == "${src}" ]; then
                skip=true;
            else
                user "File already exists: ${dst} ($(basename "${src}")), what do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action
                case "${action}" in
                    o )
                        overwrite=true
                        ;;
                    O )
                        overwrite_all=true
                        ;;
                    b )
                        backup=true
                        ;;
                    B )
                        backup_all=true
                        ;;
                    s )
                        skip=true
                        ;;
                    S )
                        skip_all=true
                        ;;
                    * )
                        ;;
                esac

            fi
        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "${overwrite}" == "true" ]; then
            rm -rf "${dst}"
            success "removed ${dst}"
        fi

        if [ "$backup" == "true" ]; then
            mv "${dst}" "${dst}.backup"
            success "moved ${dst} to ${dst}.backup"
        fi

        if [ "${skip}" == "true" ]; then
            success "skipped ${src}"
        fi
    fi

    if [ "$skip" != "true" ]; then  # "false" or empty
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi

    # Indicate the the boostrap script has been run
    touch "${DOTFILES_ROOT}/.initialized"
}

function install_dotfiles() {
    info 'installing dotfiles'

    local overwrite_all=false skip_all=false

    if [ -f "${DOTFILES_ROOT}/.initialized" ]
    then
        local backup_all=false
    else
        # Backup all on the first run.
        local backup_all=true
    fi

    for src in $(find -H "${DOTFILES_ROOT}" -maxdepth 2 -name '*.symlink')
    do
        dst="${HOME}/.$(basename "${src%.*}")"
        link_file "${src}" "${dst}"
    done
}

create_my_dirs() {
    for tmpdir in ~/bitbucket ~/github ~/tmp ~/tmpvim
    do
        if [ ! -d ${tmpdir} ]; then
            info "Creating ${tmpdir}"
            mkdir ${tmpdir}
            success "Created ${tmpdir}"
        fi
    done
}

copy_extra_gitconfigs() {
    cp --no-clobber ~/.dotfiles/git/gitconfig-work-bitbucket ~/.gitconfig-work-bitbucket
    cp --no-clobber ~/.dotfiles/git/gitconfig-work-github ~/.gitconfig-work-github
    cp --no-clobber ~/.dotfiles/git/gitconfig-work-gitlab ~/.gitconfig-work-gitlab

    info "You will need to manually update ~/.gitconfig-work-* files"
}

###############################################################################

create_my_dirs

install_dotfiles

if [ "$(uname)" == "Darwin" ]; then
    info "Mac detected"
    osx/homebrew
    osx/grml_zsh
    osx/nvim

elif [ "$(uname)" == "Linux" ]; then
    info "Linux detected"

    if [ -f "/etc/arch-release" ]; then
        if [ -f ~/.config/dotfiles/profile ]; then
            DOTFILE_PROFILE="$(cat ~/.config/dotfiles/profile)"
            export DOTFILE_PROFILE
        fi

        archlinux/install_packages
        success "Arch Linux packages installed."
    fi
fi

printf "\n"
printf "Install Vim 8 packages natively\n"
scripts/vim_packages

printf "\nInstall XDG config and data files\n"
scripts/xdg_config
scripts/xdg_local

#cd ${DOTFILES_ROOT} && bin/update-git

copy_extra_gitconfigs

printf "\n\n"
success "All installed!"
