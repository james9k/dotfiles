# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=13000
SAVEHIST=10000
setopt appendhistory
setopt SHARE_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_DUPS
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename "${HOME}/.zshrc"

autoload -Uz compinit
compinit
# End of lines added by compinstall
autoload -U +X bashcompinit && bashcompinit

######### Key Bindings #########
bindkey '\e[3~' delete-char  # delete
if [ "${TERM}" = "linux" ]; then
    bindkey '\e[1~' beginning-of-line  # Home
    bindkey '\e[4~' end-of-line  # End
elif [ "${TERM}" = "xterm-256color" ]; then
    bindkey '\e[H' beginning-of-line  # Home
    bindkey '\e[F' end-of-line  # End
fi

######### Set PATH #########
path=("${HOME}/bin" ${HOME}/.cargo/bin $path)
export PATH

######### Git Colour Prompt #########
function display_git_branch  {
  git branch --no-color 2> /dev/null | grep '*' | sed -e 's/* \(.*\)/[\1]/'
}
PROMPT='%F{green}%m%f:%F{blue}%~%f:%F{yellow}$(display_git_branch)%f%# '
setopt promptsubst

######### Aliases #########
if [ -f ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi

######### Command completion #########
# git tab completion handled by autoload of compinit

# AWS
if [ -e /usr/bin/aws_zsh_completer.sh ]; then
    source /usr/bin/aws_zsh_completer.sh
fi

# Kubernetes
type kubectl > /dev/null && source <(kubectl completion zsh)
type minikube > /dev/null && source <(minikube completion zsh)
type kops > /dev/null && source <(kops completion zsh)

# Hashicorp
type terraform > /dev/null && complete -o nospace -C /usr/bin/terraform terraform
type vault > /dev/null && complete -o nospace -C /usr/bin/vault vault

# Azure cli autocomplete
AZURE_COMPLETION_PATH="${HOME}/lib/azure-cli/az.completion"
if [ -e ${AZURE_COMPLETION_PATH} ]; then
    source ${AZURE_COMPLETION_PATH}
fi

######### Python Virtualenv #########
if [ -e /usr/bin/virtualenvwrapper.sh ]; then
    source /usr/bin/virtualenvwrapper.sh
fi

######### SSH Agent #########
if [ "$(uname)" = "Linux" ]; then
    if [ -f /usr/bin/keychain ]; then
        eval $(keychain --eval --quiet id_rsa)
    else
        echo "keychain is not installed."
    fi
fi

