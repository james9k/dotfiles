# Turn on profiling
#zmodload zsh/zprof

GRML_NO_APT_ALIASES=1
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=9000
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_ALL_DUPS # If a new command line being added to the history list duplicates an older one, the older command is removed from the list.
#setopt HIST_IGNORE_DUPS # Do not enter command lines into the history list if they are duplicates of the previous event.
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
#zstyle :compinstall filename "${HOME}/.zshrc"

# Local zsh completions
if [ -d ~/.zsh_aliases ]; then
    fpath=(~/.local/share/zsh/site-functions $fpath)
fi

# Command completion
# https://stackoverflow.com/questions/67136714/how-to-properly-call-compinit-and-bashcompinit-in-zsh
autoload -Uz compinit bashcompinit
compinit
bashcompinit

# Config GRML Zsh
autoload -U colors && colors
zstyle ':grml:chpwd:dirstack' enable false # Disable DIRSTACK, because of NFS shares

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr '!'
zstyle ':vcs_info:*' stagedstr '+'
zstyle ':vcs_info:git*' formats "%{${fg[cyan]}%}[%{${fg[yellow]}%}%b%{${fg[yellow]}%}%m%u%c%{${fg[cyan]}%}]%{$reset_color%}"
zstyle ':prompt:grml:*:items:host' pre '%F{green}'
zstyle ':prompt:grml:*:items:host' post '%f'
zstyle ':prompt:grml:*:items:path' pre '%F{blue}'
zstyle ':prompt:grml:*:items:path' post '%f'
zstyle ':prompt:grml:left:setup' items rc change-root host path virtual-env vcs percent

function virtual_env_prompt () {
    REPLY=${VIRTUAL_ENV+(${VIRTUAL_ENV:t}) }
}

grml_theme_has_token virtual-env || grml_theme_add_token virtual-env -f virtual_env_prompt '%F{magenta}' '%f'

# Key Bindings
bindkey '\e[3~' delete-char  # delete
if [ "${TERM}" = "linux" ]; then
    bindkey '\e[1~' beginning-of-line  # Home
    bindkey '\e[4~' end-of-line  # End
elif [ "${TERM}" = "xterm-256color" ]; then
    bindkey '\e[H' beginning-of-line  # Home
    bindkey '\e[F' end-of-line  # End
fi

# To Set PATH see ~/.zshenv

# Aliases
if [ -f ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi

# Command completion
# git tab completion handled by autoload of compinit

# Kubernetes
#type kubectl > /dev/null && source <(kubectl completion zsh)
#whence minikube > /dev/null && source "${HOME}/.dotfiles/completion/minikube-zsh"

# Hashicorp
# Terraform package has: /usr/share/zsh/site-functions/_terraform
#whence terraform > /dev/null && complete -o nospace -C $(whence terraform) terraform
#type vault > /dev/null && complete -o nospace -C $(whence vault) vault

# Python
if [ -e /usr/bin/virtualenvwrapper_lazy.sh ]; then
    source /usr/bin/virtualenvwrapper_lazy.sh
elif [ -e /usr/bin/virtualenvwrapper.sh ]; then
    source /usr/bin/virtualenvwrapper.sh
fi

if [ "$(uname)" = "Linux" ]; then
    # SSH Agent
    # Allowing desktop environment to handle ssh agent
    #if [ -z "${SSH_TTY}" ]; then
    #    printf "\nThis is an SSH session, not unlocking keychain\n"
    #else
    #    type keychain > /dev/null && eval $(keychain --eval --quick --quiet id_rsa)
    #fi

    if [ -f "/usr/share/fzf/key-bindings.zsh" ]; then
        source /usr/share/fzf/key-bindings.zsh  # Arch Linux
    fi

    RANGER_BIN="/usr/bin/ranger"


elif [ "$(uname)" = "Darwin" ]; then
    FZF_DEFAULT_COMMAND='fd --type f --color=never'
    export FZF_DEFAULT_COMMAND

    FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_CTRL_T_COMMAND
    source $(brew --prefix)/opt/fzf/shell/key-bindings.zsh

    RANGER_BIN="$(brew --prefix)/bin/ranger"

    VIRTUALENVWRAPPER_PYTHON="/usr/local/bin/python3"
    export VIRTUALENVWRAPPER_PYTHON
    if [ -x /usr/local/bin/virtualenvwrapper_lazy.sh ]; then
        source /usr/local/bin/virtualenvwrapper_lazy.sh
    fi

fi

ranger() {
    # Prevent ranger inception

    if [ -z "$RANGER_LEVEL" ]; then
        "${RANGER_BIN}" "$@"
    else
        exit
    fi
}

# Termite for ctrl-shift-t
if [[ $TERM == xterm-termite ]]; then
  . /etc/profile.d/vte.sh
  __vte_osc7
fi

EDITOR="nvim"
export EDITOR

# NPM
npm_config_prefix="${HOME}/.local"
export npm_config_prefix

# Wayland
if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
    MOZ_ENABLE_WAYLAND=1
    export MOZ_ENABLE_WAYLAND
fi

# AWS CLI
if command -v aws_completer &> /dev/null; then
    complete -C "$(command -v aws_completer)" aws
fi

# Put work only stuff in here so it doesn't pollute my personal setup.
if [ -e ~/.zshrc.local.work ]; then
    xsource ~/.zshrc.local.work
fi

NEXTCLOUD_PHP_CONFIG="/etc/webapps/nextcloud/php.ini"
export NEXTCLOUD_PHP_CONFIG

RIPGREP_CONFIG_PATH="${HOME}/.config/ripgrep/rgrc"
export RIPGREP_CONFIG_PATH

# Turn off profiling
#zprof
